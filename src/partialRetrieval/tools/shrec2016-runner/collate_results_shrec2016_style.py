import argparse
import csv
import os.path
import os

parser = argparse.ArgumentParser()
parser.add_argument("resultsDirectory", help="Directory containing the results generated by the algorithm")
parser.add_argument("labelDirectory", help="Directory that was distributed as part of the SHREC 2016 dataset containing labels")
parser.add_argument("rankedListsDirectory", help="Intermediate directory used for storing results files for use with the dataset's metrics tool")
args = parser.parse_args()

queryLabelFilePath = os.path.join(args.labelDirectory, 'query_labels_sorted.txt')
haystackLabelFilePath = os.path.join(args.labelDirectory, 'target_labels_sorted.txt')

queryLabels = []
haystackObjectNames = []
haystackLabels = {}

# Read query labels
with open(queryLabelFilePath, 'r') as queryLabelFile:
    for line in queryLabelFile.readlines():
        lineParts = line.split('\t')
        queryLabels.append((lineParts[0], int(lineParts[1])))

# Read haystack labels
with open(haystackLabelFilePath, 'r') as queryLabelFile:
    for lineIndex, line in enumerate(queryLabelFile.readlines()):
        lineParts = line.split('\t')
        haystackLabels[lineParts[0]] = int(lineParts[1])
        #print(lineParts[0], haystackLabels[lineParts[0]])
        haystackObjectNames.append(lineParts[0])

correctFileCount = 0
correctClassCount = 0

for resultsFileIndex, resultsFile in enumerate(os.listdir(args.resultsDirectory)):
    with open(os.path.join(args.resultsDirectory, resultsFile), 'r') as openedResultsFile:
        resultsFileContents = csv.reader(openedResultsFile, delimiter=',')
        # convert to list
        resultsFileContents = [x for x in resultsFileContents]

        # extract indices
        bestResult = resultsFileContents[1]
        bestResultFileID = int(bestResult[0][1:-4]) - 1
        resultsFileID = int(resultsFile[1:-4]) - 1

        bestResultObjectName = haystackObjectNames[bestResultFileID]
        bestResultCorrectClass = haystackLabels[bestResultObjectName]

        queryCorrectObjectName, queryCorrectClass = queryLabels[resultsFileID]

        if bestResultObjectName == queryCorrectObjectName:
            correctFileCount += 1
        if bestResultCorrectClass == queryCorrectClass:
            correctClassCount += 1

        print('\tFile', resultsFileIndex, resultsFile, ': label', queryCorrectClass, ': classification', bestResultCorrectClass)

        os.makedirs(args.rankedListsDirectory, exist_ok=True)
        rankedListFileName = 'P{:05}'.format(int(resultsFile[1:-4]))
        with open(os.path.join(args.rankedListsDirectory, rankedListFileName), 'w') as rankedListsFile:
            rankedListsFile.write(rankedListFileName + '\n')
            for searchResult in resultsFileContents[1:]:
                searchResultFileID = int(searchResult[0][1:-4])
                scoreString = '{:}'.format(searchResult[1])
                rankedListsFile.write('D{:05}'.format(searchResultFileID) + "\t" + scoreString[1:] + '.0\n')

print('Correct file count:', correctFileCount, '/', len(queryLabels))
print('Correct class count:', correctClassCount, '/', len(queryLabels))
