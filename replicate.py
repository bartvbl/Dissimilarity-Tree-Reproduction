import json
import os
import shutil
import subprocess
import random
import sys

from scripts.simple_term_menu import TerminalMenu

gpuID = 0
mainEvaluationRandomSeed = '725948161'
shrec2016_support_radius = '100'
descriptorWidthBits = 64

if not (sys.version_info.major == 3 and sys.version_info.minor >= 8):
    print("This script requires Python 3.8 or higher.")
    print("You are using Python {}.{}.".format(sys.version_info.major, sys.version_info.minor))
    sys.exit(1)

def run_command_line_command(command, working_directory='.'):
    print('>> Executing command:', command)
    subprocess.run(command, shell=True, check=False, cwd=working_directory)

def ask_for_confirmation(message):
    confirmation_menu = TerminalMenu(["yes", "no"], title=message)
    choice = confirmation_menu.show()
    return choice == 0

def downloadDatasetsMenu():
    download_menu = TerminalMenu([
        "Download all",
        "Download SHREC 2016 partial 3D shape dataset (7.9GB download, ~52.5GB extracted, needed for all Figures)",
        "Download experiment results generated by authors (~1.6GB download, 13.8GB extracted, needed for Figures 8-11)",
        "back"], title='------------------ Download Datasets ------------------')

    while True:
        choice = download_menu.show()
        os.makedirs('input/download/', exist_ok=True)

        if choice == 0 or choice == 1:
            if not os.path.isfile('input/download/SHREC17.7z') or ask_for_confirmation('It appears the SHREC 2017 dataset has already been downloaded. Would you like to download it again?'):
                print('Downloading SHREC 2017 dataset..')
                run_command_line_command('wget --output-document SHREC17.7z https://data.mendeley.com/public-files/datasets/ysh8p862v2/files/607f79cd-74c9-4bfc-9bf1-6d75527ae516/file_downloaded', 'input/download/')
            print()
            os.makedirs('input/SHREC17', exist_ok=True)
            run_command_line_command('p7zip -k -d download/SHREC17.7z', 'input/')
            print('Download and extraction complete. You may now delete the file input/download/SHREC17.7z if you need the disk space.')
            print()

        if choice == 0 or choice == 2:
            if not os.path.isfile('input/download/results_computed_by_authors.7z') or ask_for_confirmation('It appears the results archive file has already been downloaded. Would you like to download it again?'):
                print('Downloading results archive file..')
                run_command_line_command('wget --output-document results_computed_by_authors.7z https://data.mendeley.com/public-files/datasets/p7g8fz82rk/files/29a722cc-b7b5-456a-a096-5d8ac55d6881/file_downloaded', 'input/download/')
            print()
            run_command_line_command('p7zip -k -d download/results_computed_by_authors.7z', 'input/')

            print()
            if not os.path.isfile('input/download/results_computed_by_authors_quicci_fpfh.7z') or ask_for_confirmation('It appears the second results archive file has already been downloaded. Would you like to download it again?'):
                print('Downloading results archive file..')
                run_command_line_command('wget --output-document results_computed_by_authors_quicci_fpfh.7z https://data.mendeley.com/public-files/datasets/k9j5ymry29/files/519b9cab-71a7-40fa-924e-10cf9b7905d7/file_downloaded', 'input/download/')
            print()
            run_command_line_command('p7zip -k -d download/results_computed_by_authors_quicci_fpfh.7z', 'input/')

            print()
            if not os.path.isfile('input/download/clutter_estimated_by_authors.7z') or ask_for_confirmation('It appears the clutter estimates file has already been downloaded. Would you like to download it again?'):
                print('Downloading clutter estimates file..')
                run_command_line_command('wget --output-document clutter_estimated_by_authors.7z https://data.mendeley.com/public-files/datasets/p7g8fz82rk/files/37d353c5-7fd4-4488-a94a-97bb58dc722d/file_downloaded', 'input/download/')
            print()
            run_command_line_command('p7zip -k -d download/clutter_estimated_by_authors.7z', 'input/')

            print()
            print('Download and extraction complete. You may now delete the following files if you need the disk space:')
            print('- input/download/results_computed_by_authors.7z')
            print('- input/download/results_computed_by_authors_quicci_fpfh.7z')
            print('- input/download/clutter_estimated_by_authors.7z')
            print()

        if choice == 0 or choice == 3:
            if not os.path.isfile('input/download/distances_computed_by_authors.7z') or ask_for_confirmation('It appears the computed distances archive file has already been downloaded. Would you like to download it again?'):
                print('Downloading distance function distances computed by authors..')
                run_command_line_command('wget --output-document distances_computed_by_authors.7z https://data.mendeley.com/public-files/datasets/k9j5ymry29/files/b3fe4f65-bf36-4fa7-9d26-217a59e35e54/file_downloaded', 'input/download/')
            print()
            os.makedirs('input/SHREC17', exist_ok=True)
            run_command_line_command('p7zip -k -d download/distances_computed_by_authors.7z', 'input/')
            print('Download and extraction complete. You may now delete the file input/download/distances_computed_by_authors.7z if you need the disk space.')
            print()

        if choice == 4:
            return

def installDependenciesMenu():
    install_menu = TerminalMenu([
        "Install all dependencies except CUDA",
        "Install CUDA (through APT)",
        "back"], title='---------------- Install Dependencies ----------------')

    while True:
        choice = install_menu.show()

        if choice == 0:
            run_command_line_command('sudo apt install cmake python3 python3-pip libpcl-dev g++ gcc build-essential wget p7zip')
            run_command_line_command('sudo pip3 install simple-term-menu xlwt xlrd numpy matplotlib pillow PyQt5')
            print()
        if choice == 1:
            run_command_line_command('sudo apt install nvidia-cuda-toolkit nvidia-cuda-dev')
            print()
        if choice == 2:
            return

def compileProject():
    print('This project uses cmake for generating its makefiles.')
    print('It has a tendency to at times be unable to find an installed CUDA compiler.')
    print('Also, depending on which version of CUDA you have installed, you may need')
    print('to change the version of GCC/G++ used for compatibility reasons.')
    print('If either of these occurs, modify the paths at the top of the following file: ')
    print('    src/partialRetrieval/CMakeLists.txt')
    print()

    os.makedirs('bin', exist_ok=True)

    compileProjectMenu = TerminalMenu([
        "Run cmake (must run before make)",
        "Run make",
        "back"], title='------------------- Compile Project -------------------')

    while True:
        choice = compileProjectMenu.show()

        if choice == 0:
            run_command_line_command('rm -rf bin/*')
            run_command_line_command('cmake ../src/partialRetrieval -DCMAKE_BUILD_TYPE=Release', 'bin')
        if choice == 1:
            run_command_line_command('make -j 4', 'bin')
        if choice == 2:
            return

def configureGPU():
    global gpuID
    run_command_line_command('src/clutterbox/build/clutterbox --list-gpus')
    print()
    gpuID = input('Enter the ID of the GPU to use (usually 0): ')

def changeDescriptorWidth(newWidth):
    run_command_line_command("sed -i 's/^#define spinImageWidthPixels .*/#define spinImageWidthPixels " + str(newWidth) + "/' src/libShapeDescriptor/src/shapeDescriptor/libraryBuildSettings.h")
    run_command_line_command('make -j 4', 'bin')

def configureDescriptorWidth():
    descriptorWidthMenu = TerminalMenu([
        "32x32 bits",
        "64x64 bits",
        "96x96 bits",
        "cancel"], title='------------------- Set descriptor size -------------------')

    choice = descriptorWidthMenu.show()

    if choice == 0:
        changeDescriptorWidth(32)
    if choice == 1:
        changeDescriptorWidth(64)
    if choice == 2:
        changeDescriptorWidth(96)

def generateAugmentedDataset():
    while True:
        os.makedirs('output/augmented_dataset_best', exist_ok=True)
        os.makedirs('output/augmented_dataset_remeshed', exist_ok=True)

        run_menu = TerminalMenu([
            "Generate augmented dataset without remeshing",
            "Generate augmented dataset with remeshing",
            "Copy objects computed by authors",
            "back"], title='-- Generate augmented SHREC\'16 dataset --')
        choice = run_menu.show()
        if choice == 0:
            run_command_line_command('bin/querysetgenerator '
                                     '--object-directory=input/SHREC2016_partial_retrieval/complete_objects '
                                     '--output-directory=output/augmented_dataset_best '
                                     '--random-seed=' + mainEvaluationRandomSeed)
        if choice == 1:
            run_command_line_command('bin/querysetgenerator '
                                     '--object-directory=input/SHREC2016_partial_retrieval/complete_objects '
                                     '--output-directory=output/augmented_dataset_remeshed '
                                     '--redistribute-triangles '
                                     '--random-seed=' + mainEvaluationRandomSeed)
        if choice == 2:
            print('Copying best case objects')
            shutil.copytree('input/augmented_dataset_best', 'output/augmented_dataset_best', dirs_exist_ok=True)
            print('Copying remeshed objects')
            shutil.copytree('input/augmented_dataset_remeshed', 'output/augmented_dataset_remeshed', dirs_exist_ok=True)
        if choice == 3:
            return

def computeDescriptorsFromDirectory(inputDirectory, outputDirectory):
    os.makedirs(outputDirectory, exist_ok=True)
    filesToProcess = [f for f in os.listdir(inputDirectory) if os.path.isfile(os.path.join(inputDirectory, f))]
    print('Computing images: ', inputDirectory, '->', outputDirectory)
    print('Found', len(filesToProcess), 'files')
    for index, fileToProcess in enumerate(filesToProcess):
        inputFilePath = os.path.join(inputDirectory, fileToProcess)
        dumpFilePath = os.path.join(outputDirectory, fileToProcess[0:-4] + '.dat')
        print('\tProcessing file', (index + 1), '/', len(filesToProcess), ':', fileToProcess)

        subprocess.run('bin/descriptorDumper'
                       + ' --input-file="' + inputFilePath
                       + '" --output-file="' + dumpFilePath
                       + '" --support-radius=' + str(shrec2016_support_radius), shell=True)

def computeDescriptors():
    for descriptorwidth in ['32', '64', '96']:
        os.makedirs('output/descriptors/complete_objects_' + descriptorwidth + 'x' + descriptorwidth, exist_ok=True)
        os.makedirs('output/descriptors/augmented_dataset_best_' + descriptorwidth + 'x' + descriptorwidth, exist_ok=True)
        os.makedirs('output/descriptors/augmented_dataset_remeshed_' + descriptorwidth + 'x' + descriptorwidth, exist_ok=True)
        os.makedirs('output/descriptors/shrec2016_25partiality_' + descriptorwidth + 'x' + descriptorwidth, exist_ok=True)
        os.makedirs('output/descriptors/shrec2016_40partiality_' + descriptorwidth + 'x' + descriptorwidth, exist_ok=True)

    while True:
        run_menu = TerminalMenu([
            "Generate all descriptors (will take several hours)",
            "Copy all descriptors precomputed by authors",
            "Generate descriptors for a random object and compare checksums",
            "back"], title='-- Compute descriptors --')
        choice = run_menu.show()
        if choice == 0:
            for index, descriptorwidth in enumerate(['32', '64', '96']):
                changeDescriptorWidth(int(descriptorwidth))
                print('Processing batch 1/5 in resolution ' + descriptorwidth + 'x' + descriptorwidth + ' (' + str(index + 1) + '/3)')
                computeDescriptorsFromDirectory('input/SHREC2016_partial_retrieval/complete_objects',
                                                'output/descriptors/complete_objects_' + descriptorwidth + 'x' + descriptorwidth)
                print('Processing batch 2/5 in resolution ' + descriptorwidth + 'x' + descriptorwidth + ' (' + str(index + 1) + '/3)')
                computeDescriptorsFromDirectory('output/augmented_dataset_best',
                                                'output/descriptors/augmented_dataset_best_' + descriptorwidth + 'x' + descriptorwidth)
                print('Processing batch 3/5 in resolution ' + descriptorwidth + 'x' + descriptorwidth + ' (' + str(index + 1) + '/3)')
                computeDescriptorsFromDirectory('output/augmented_dataset_remeshed',
                                                'output/descriptors/augmented_dataset_remeshed_' + descriptorwidth + 'x' + descriptorwidth)
                print('Processing batch 4/5 in resolution ' + descriptorwidth + 'x' + descriptorwidth + ' (' + str(index + 1) + '/3)')
                computeDescriptorsFromDirectory('input/SHREC2016_partial_retrieval/queries_artificial/Q25',
                                                'output/descriptors/shrec2016_25partiality_' + descriptorwidth + 'x' + descriptorwidth)
                print('Processing batch 5/5 in resolution ' + descriptorwidth + 'x' + descriptorwidth + ' (' + str(index + 1) + '/3)')
                computeDescriptorsFromDirectory('input/SHREC2016_partial_retrieval/queries_artificial/Q40',
                                                'output/descriptors/shrec2016_40partiality_' + descriptorwidth + 'x' + descriptorwidth)
        if choice == 1:
            print('Copying precomputed descriptors..')
            shutil.copytree('input/descriptors', 'output/descriptors', dirs_exist_ok=True)
        if choice == 2:
            pass
        if choice == 3:
            return

main_menu = TerminalMenu([
    "1. Install dependencies",
    "2. Download datasets",
    "3. Compile project",
    "4. Generate augmented SHREC'2016 dataset",
    "5. Compute descriptors",
    "6. Run vote counting experiment (Figure 3)",
    "7. Run average search result distance experiment (Figure 4)",
    "8. Compute average descriptor heatmap (Figure 6)",
    "9. Run dissimilarity tree evaluation (Figure 10)",
    "10. Run modified quicci evaluation (Figures 11 and 12)",
    "11. Run all to all object search (Table 1 and Figure 13)",
    "12. Run partial retrieval pipeline evaluation (Figures 14 and 15)",
    "13. Run SHREC'16 artificial benchmark (Figure 16)",
    "14. Run query duration evaluation (Figure 17)",
    "15. exit"], title='---------------------- Main Menu ----------------------')

def runMainMenu():
    while True:
        choice = main_menu.show()

        if choice == 0:
            installDependenciesMenu()
        if choice == 1:
            downloadDatasetsMenu()
        if choice == 2:
            compileProject()
        if choice == 3:
            generateAugmentedDataset()
        if choice == 4:
            computeDescriptors()
        if choice == 5:
            pass
        if choice == 6:
            pass
        if choice == 7:
            pass
        if choice == 8:
            pass
        if choice == 9:
            pass
        if choice == 10:
            pass
        if choice == 11:
            pass
        if choice == 12:
            pass
        if choice == 13:
            pass
        if choice == 14:
            return

def runIntroSequence():
    print()
    print('Greetings!')
    print()
    print('This script is intended to reproduce various figures in an interactive')
    print('(and hopefully convenient) manner.')
    print()
    print('It is recommended you refer to the included PDF manual for instructions')
    print()
    runMainMenu()


if __name__ == "__main__":
    runIntroSequence()